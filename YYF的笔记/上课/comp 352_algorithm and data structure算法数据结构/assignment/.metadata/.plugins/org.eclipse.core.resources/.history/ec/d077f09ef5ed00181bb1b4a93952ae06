package assignment3mignong;
//记录怎么算时间的
public class PriorityQueueSimulatorTester {
	public static void main(String[] args) {
		
		int maxNumberOfJobs = 1000;// upper limit
		int totalWaitTime = 0;
		long startTime=System.currentTimeMillis();
		int cycleNum=0;
		boolean moveOnce=false;
		Job processing=null;   
		Job[] jobsInputArray = new Job[maxNumberOfJobs];
		for (int i =0; i< maxNumberOfJobs; i++) {
			int jobLength = (int )(Math.random()*69 )+1; 
			int jobPriority = (int )(Math.random()*39 )+1; 
			jobsInputArray[i]= new Job((i+1), jobLength, jobPriority);
		}
		
		
		
		
		
//----------------------------------------------------------------------------------------------------------------------	

	
		ArrayListHeapPriorityQueue ALPQ = new ArrayListHeapPriorityQueue(); 
		for (int i=0; i<maxNumberOfJobs; i++) {//   这一步是为了把Inputarray加到pq里
			ALPQ.addToPQ(new Job (jobsInputArray[i]), cycleNum);
			cycleNum++;//every add will add 1 cycle
		}
		
		while( ALPQ.size()>0) {
			if ((maxNumberOfJobs-ALPQ.size())%30==0&&moveOnce==true) {
				ALPQ.moveStarved();		
				moveOnce=false;
			}
			if ((maxNumberOfJobs-ALPQ.size())%30!=0){
				moveOnce=true;
			}
			processing = ALPQ.removeMin();
			cycleNum++;			
			System.out.println(processing);			
			if (processing.process()) {
				processing.terminateJob(cycleNum);
				totalWaitTime += processing.getWaitTime();
			}else {
				ALPQ.addToPQ(processing, cycleNum);
			}
		}
		System.out.println("ArrayList Heap PQ ");
        System.out.println("Current system time (cycles): " + cycleNum);
        System.out.println("Total number of jobs executed: " + maxNumberOfJobs + " jobs");
        System.out.println("Average process waiting time: " + totalWaitTime/maxNumberOfJobs + " cycles");
        System.out.println("Total number of priority changes: " + ALPQ.getPriorityChanges());
        System.out.println("Actual system time needed to execute all jobs: " + (System.currentTimeMillis()-startTime) + " ms");
        System.out.println();

//---------------------------------------------------------------------------------------------------------------------------------------------
   /*
		SortPriorityQueue SPQ = new SortPriorityQueue();
		for (int i=0; i<maxNumberOfJobs; i++) {
			SPQ.addToPQ(  new Job (jobsInputArray[i]), cycleNum);
			cycleNum++;
		}
		while( SPQ.size()>0) {		
			if ((maxNumberOfJobs-SPQ.size())%30==0&&moveOnce==true) {
				SPQ.moveStarved();		
				moveOnce=false;
			}
			if ((maxNumberOfJobs-SPQ.size())%30!=0){
				moveOnce=true;
			}
			processing = SPQ.removeMin();//the index 0
			cycleNum++;			
	     	System.out.println(processing);
			boolean check = processing.process();//current length -1,if still >0,false 
			if (check) {
				processing.terminateJob(cycleNum);
				totalWaitTime += processing.getWaitTime();
			}
			else {
				SPQ.addToPQ(processing, cycleNum);
			}
		}
		System.out.println("Sorted ArrayList PQ ");
		System.out.println("Current system time (cycles): " + cycleNum);
        System.out.println("Total number of jobs executed: " + maxNumberOfJobs + " jobs");
        System.out.println("Average process waiting time: " + totalWaitTime/maxNumberOfJobs + " cycles");
        System.out.println("Total number of priority changes: " + SPQ.getPriorityChanges());
        System.out.println("Actual system time needed to execute all jobs: " + (System.currentTimeMillis()-startTime) + " ms");
        System.out.println();
        
        */
        
	}
	

}