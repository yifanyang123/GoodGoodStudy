package assignment3;

import java.util.Comparator;
//abstract pq used to implement arrayheap and sorted pq
public abstract class AbstractPriorityQueue<K,V> implements PriorityQueue<K,V> {

    protected static class PQEntry<K,V> implements Entry<K,V> {
        private K k;
        private V v;

        public PQEntry(K key, V value) {
            k = key;
            v = value;
        }

        @Override
        public K getKey() {
            return k;
        }

        @Override
        public V getValue() {
            return v;
        }

        protected void setK(K k) {
            this.k = k;
        }

        protected void setV(V v) {
            this.v = v;
        }

    }

    private Comparator<K> comp;

    protected AbstractPriorityQueue(Comparator<K> c) {
        comp = c;
    }

    protected AbstractPriorityQueue() {
        comp = null;
    }

    protected int compare(Entry<K,V> e1, Entry<K,V> e2) {
        return comp.compare(e1.getKey(), e2.getKey());
    }

    protected boolean checkKey(K key) throws IllegalArgumentException {
        try{
            return (comp.compare(key,key) == 0);
        } catch (ClassCastException e) {
            throw new IllegalArgumentException("Incompatible key");
        }
    }

    public boolean isEmpty() {
        return size() == 0;
    }

}